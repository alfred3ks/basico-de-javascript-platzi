Curso basico de Javascript: Platzi -2021

_____________________
1- Que es Javascript:
---------------------

¿Cómo nace Javascript?
Nace con la necesidad de generar dinamismo en las páginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.

¿Qué es Javascript?
Es un lenguaje interpretado, orientado a objetos, débilmente tipado y dinámico.

Débilmente tipado:
Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:


    4 + "7"; //47
    4 * "7"; //28
    2 + true; // 3
    false - 3; //-3


Dinámico:
Corre directamente en la etapa de Runetime sin una etapa de compilación previa. Esto permite probar nuestro código inmediatamente; pero también es lo que hace que los errores se muestren hasta que se ejecuta el programa.

¿Realmente es Javascript un lenguaje interpretado?

Si, y la razón es que le navegador lee linea por linea nuestro código el cuál le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador.

Forwards: Ser compatible con versiones futuras significa que incluir una adición al lenguaje en un programa no causaria que se rompa si se ejecuta en un motor JS anterior.

JS no es compatible con versiones futuras.

Javascript es Backwards Compatible:

Todas las funciones nuevas que salen de Javascript no dañarán el trabajo ya hecho, pero no se podrá utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto está Babel que permite utilizar las nuevas características del lenguaje pero lo transforma a una versión que el navegador pueda entender.

Para poder utilizar las cosas nuevas que salen de JS en proyectos anteriores debemos usar JS Compilador BABEL.

Es un compilador de JS para usar las nuevas mejoras de JS.

JavaScript tiene una comunidad enorme de desarrolladores que te pueden ir ayudando a generar diferentes cosas.

Si solo estuvieras interesado en trabajar aplicaciones web tienes muchos frameworks y librerías construidas en JavaScript que te van a ayudar a hacer proyectos de forma mucho mas rápida, eficiente y robusta (Angular, View, React,entre otros)

Si no quieres trabajar solo en aplicaciones Web puedes utilizar JavaScript con un framework que se llama React Native para poder construir aplicaciones nativas como Android y IOS.

Puedes construir aplicaciones de escritorio con JavaScript, usando un framework llamado Electron, pueden correr en Mac o Windows.

También puedes trabajar en la parte del Back-end o **IOT **(Internet Od Things) es un concepto que se refiere a una interconexion digital de objetos cotidianos con Internet. Esto con un Framework llamado NodeJS, el cual es un entorno de ejecución de JavaScript que corre directamente en el Back-end.

___________________
TIPOS DEL LENGUAJE: valores del lenguaje:
-------------------

Todos los lenguajes de programación contienen estructuras de datos, pero estas pueden diferir de un lenguaje a otro.

En Javascript salvo los tipos primitivos, todo lo demás son objetos.

En Javascript existen 6 estructuras de datos primitivas:

    Primitivos:
    - String
    - Number
    - Boolean
    - Symbol (ECMAScript 6)
    - Null
    - Undefined

    - Existen otras estructuras de datos como:
    - Objetos
        - Array
        - Diccionarios
    - Tipos predefinidos por el lenguaje
        - Dates
        - RegExp
    - Tipos definidos por el desarrollador
        - Funciones

-------------------
VALORES PRIMITIVOS:
-------------------

// numberos (Number)
let numero = 40;

// cadenas de textos (String)
let nombre = "Alfredo"; // Podemos usar comillas dobles
let ciudad = 'Madrid'; // Podemos usar simples

// Booleanos (Boolean)
let cierto = true;
let falso = false;

// Valores vacios null y undefined: Para ocupar el espacio en memoria para luego asignarle el valor.
let admin = null;
let edad = undefined;

--------------------
VALORES TIPO OBJETOS:
--------------------

// arrays
let frutas = ["manzanas", "peras", "uvas"];
let array = [1,"Madrid",false,23];

// objetos
let usuario = {
    nombre: "Alfredo",
    apellido: "Sánchez",
    edad: 25,
    isDev:true
}

--------------------
// Para ver los tipos de los valores podemos usar la palabra reservada-> typeof
--------------------

console.log(typeof nombre);// string
console.log(typeof cierto);// boolean
console.log(typeof admin);// object
console.log(typeof edad);// undefined
console.log(typeof frutas);// object
console.log(typeof usuario);// object


_______________
VARIABLES EN JS:
---------------
Son los contenedores dentro de la memoria que podemos reservar para guardar los valores, JS tiene una palabra reservada llamada let, para las varables y const para las constantes.

let nombre = "Juan";
console.log(nombre); // Juan

Existen dos estados de las variables, una es la declaracion y otra es la inicializacion.

declaramos una variable:

let apellido;
console.log(apellido); // undefined

inicializamos los valores a esa variable
apellido = "Gomez";
console.log(apellido); // Gomez

Creamos un array con declaracion y iniciacion al mismo tiempo:
Conjunto de elementos:

let equipo = ["PC", "Movil", "Monitor", "Teclado"];
console.log(equipo); // [ 'PC', 'Movil', 'Monitor', 'Teclado' ]
console.log(equipo[1]); // Movil

Ahora con un objeto:

let persona = {
    nombre: "Laika",
    apellido: "De la Concepcion",
    edad: 5
}
console.log(persona); // { nombre: 'Laika', apellido: 'De la Concepcion', edad: 5 }

console.log(persona.nombre); // Laika

_____________________
LAS CONSTANTES EN JS:
---------------------
A diferencia de las variables que pueden cambiar a lo largo de nuestro programa, las constantes no. Su valor es inmutable una ves declaradas.


const ciudad = "China";
ciudad = "EEUU"; // Nos da error

    Uncaught TypeError: Assignment to constant variable.

__________
Funciones:
----------
Son un conjunto de sentencias que podemos utilizar para generar ciertas acciones con los valores ya guardados antes en las variables.

Las funciones son fragmentos de codigo reutilizable.
Para definir una funcion utilizaremos a palabra reservada function.

Existen dos formas de declarar una funciones: Declarativas y las de Expresion:
_____________
Declarativas:
-------------

function miFuncion() {
    return 3;
    }

miFuncion();

______________________
Expresion: (anonimas):
----------------------

let miFuncion = function(a,b){
    return a + b;
    }

miFuncion(3,5); // 8

Las funciones en funcion del tipo que sean pueden recibir parmetros.

Tambien existen las funciones flechas:

let play = () => {
    return "Vamos a jugar";
}

play();

Nota importante, las funciones pueden o no devolver valores, lo vemos con la palabra reservada return, si creamos una funcion sin el return veremos que aunque le hagamos una llamada con el console.log no nos mostrara nada, veamos este ejemplo:

let dato1 = (a,b)=>{
    let resultado = a + b;
    return resultado;
}

let dato2 = (a,b)=>{
    let resultado = a + b;
    console.log(resultado);
}

console.log(dato1(7,9));
dato2(8,9);

Aunque vemos por pantalla que nos retorna un resultado, la primera funcion dato1 esta devolviiendo el resultado y ese valor es el que se muestra en el pimer console.log.

En cambio en la segunda funcion al llamarla es el console.log dentro de ella que se ejecuta pero esta funcion no devuelve nada.

_______________
EL SCOPE EN JS:
---------------
Es el alcance que tienen las variables, depende mucho de donde declares o inicialices una vriable de si vas a tener acceso a ella o no.

Tenemos dos tipos de scope, el global y el local.

    Tenemos el scope global:

    Son las variables declaradas en nuestro archivo JS que al ser inicializados en el navegador en ese mommento se genera el scope global. En el scope global tenemos todas las declaraciones de las variables, las funciones, las validaciones, ahi van a existir.

    El scope local:

    Es un pequeño universo que existe dentro del scope global. Una ves inicializada una funcion, dentro de ella, se va a generar algo que se llama scope local. Solo desde dentro de la funcion tendremos acceso a los datos declarados dentro de ella. Desde el scope local podemos acceder a las variables del scope global, pero al reves no.

Ejemplo:
Scope global:
Declaramos una variable dentro del scope global:

let nombre = "Arnold";

Creamos una funcion con una variable dentro que tiene scope local:

function usuario(){
    // Scope local
    let apellido = "Facundo";
    return `${nombre} ${apellido}.`;
}

// Al llamar la funcion tenemos lo siguiente:

console.log(usuario()); // Arnold Facundo

console.log(nombre); // Arnold

console.log(apellido); // Uncaught ReferenceError: apellido is not defined

Nos dice que el apellido en el scope global no esta definido, ya que este se encuentra dentro de una funcion, dentro de un scope local, a esa variable solo es accesible dentro de la propia funcion, el scope local pero nunca desde fuera, el scope global.

En cambio las variables globales si pueden ser accesibles desde dentro de la funcion osea desde el scope local.

_______________
HOISTING EN JS:
---------------
Solo ocurre con las variables y las funciones:

Cuando las variables y las funciones se declaran antes de que se procese cualquier tipo de codigo, esto solo pasa con versiones pasadas de JS, ECMASCript 5 para atras.

De ECMASCript 6 ya no sucede porque solo sucede con dos palabras claves, var y function. Las nuevas versiones presentaron nuevas formas de declarar variables que son let y const.

OJO--------
    Las variables y las funciones se procesan antes de ejecutar cualquier codigo y ahi se genera el hoisting, pero las funciones de declaran antes que las variables.
OJO--------


Ejemplos:
______________________
HOISTING EN VARIABLES: OJO esto solo pasa cuando usamos -> var en variables
----------------------
var miNombre; // declaracion
miNombre = "Pepito"; // inicializacion
console.log(miNombre); // Pepito

console.log(miApellido); // undefined ¿Whatsss?
var miApellido = "Motta";
console.log(miApellido); // Motta

// Aqui se genera hoisting porque esta mandando a llamar una variable antes de declararla y inicializarla, loque hace JS es declarar esa variable asi: var miApellido = undefined; y asi una variable es undefined, por eso el console nos muestra undefined. Vamos a ver como lo hace:

var miApellido = undefined;
console.log(miApellido); // undefined
var miApellido = "Motta"; // aqui inicializamos
console.log(miApellido); // Motta

______________________
HOISTING EN FUNCIONES:
----------------------
saludo();

function saludo(){
    console.log(`Hola mi NOMBRE es ${nombre}....`); // Hola mi nombre es undefined
}

var nombre= "Abrines";
saludo();

Aqui vemos lo mismo, se produce un hoistin, JS declara encima la variable var nombre = undefined; y luego cuando se produce el console tenemos esa salida.


var nombre = undefined;
function hey(){
    console.log(`Hola mi nombre es ${nombre}`); // Hola mi nombre es undefined
}
hey();

var nombre = "Abrines";

NOTA:
    Por buenas practicas se recomienda declarar todas las variables al inicio del codigo.

NOTA las funciones flechas no hacen hoistin ni las funciones anonimas si usamos let.

let niFuncion = function(){return a + b};

Podemos ver esta web donde explica un poco mas profundo el tema del hoisting en JS:

    https://anamartinezaguilar.medium.com/qu%C3%A9-es-el-hoisting-327870f67b36

En JavaScript, las declaraciones (por ejemplo, de variables o funciones) se mueven al principio de su scope o ámbito. Este comportamiento se conoce como hoisting y es muy importante tenerlo en cuenta a la hora de programar para prevenir posibles errores.
Teniendo en cuenta cómo funciona el hoisting, podemos llamar a una función y definirla más abajo, porque automáticamente JS la “subirá”. Así, este código funciona correctamente:

add();
function add() {
   var myNumber = 4;
   console.log(myNumber + myNumber);
}

Porque, aproximadamente, JS está haciendo:

function add() {
    var myNumber;
    myNumber = 4;
    console.log(myNumber + myNumber);
}
add();

En el caso de las variables, es muy importante tener en cuenta que el hoisting solo se aplica a la declaración, y no a su asignación.
Por lo tanto, NO podríamos escribir esto:

//Error
add();
function add() {
    console.log(myNumber + myNumber);
}
var myNumber = 4;

Es esencial quedarnos con dos conceptos:

Las funciones siempre se mueven arriba del scope. Por lo tanto, podemos elegir donde declararlas y usarlas.

La declaración de las variables se mueven arriba del scope, pero no la asignación. Antes de usar una variable, habrá que crearla y asignarla.

_________
COERCION:
---------

Coerción: es el cambio de tipo de las variables.

Coerción es la forma en la que podemos cambiar un tipo de valor a otro, existen dos tipos de coerción:

Coerción implícita = es cuando el lenguaje nos ayuda a cambiar el tipo de valor.

Coerción explicita = es cuando obligamos a que cambie el tipo de valor.

*/

// Ejemplos: aqui vemos una coerción implicita donde JS hace una concatenación, hay dos valores de diferentes tipos, y cambia el tipo del resultado a string.

let a = 4;
let b = "7"
let suma = a + b;
console.log(suma); // "47"
console.log( typeof suma); // string what????

let producto = a * b;
console.log(producto); // 28
console.log( typeof producto); // number pero whatsss???

// Ahora veremos unos ejemplos de coerción explicita:
let c = 20;
let d = c + " ";
console.log(d); // "20"
console.log( typeof d ); // string

// Nosotros obligamos el cambio de tipo, osea hacer una coercion explicita
let f = 30;
let g = String(f);
console.log(g); // "30"
console.log(typeof g); // string

let h = Number(g);
console.log(h); // 30
console.log( typeof h); // number

OJO este punto es importante, ya que si eperamos que nos venga un numero y nos viene es un string nuestro resultado podria ser erroneo.

_________________________
VALORES TRUTHY AND FALSY:
-------------------------

Vamos a ver los valores de los datos, en JS tenemos valores que son verdaderos y otros que son falsos: Es lo que llamamos los valores truthy y otros falsy, y es muy importante sobre todo cuando vamos a aplicar condicionales, en JS los valores tiene un valor por default. O son true o false.

Vamos a utilizar una funcion que nos da el lenguaje Boolean() con la cual vamos a saber si un valor es falso o verdadero:



Aqui vemos que tipo de valor es algo:

Valores false:

    let valor1 = Boolean(0);
    console.log( valor1 ); // false

    let valor2 = Boolean(null);
    console.log( valor2 ); // false

    let valor3 = Boolean(NaN);
    console.log( valor3 ); // false

    let valor4 = Boolean(undefined);
    console.log( valor4 ); // false

    let valor5 = Boolean(false);
    console.log( valor5 ); // false

    let valor7 = Boolean("");
    console.log( valor7 ); // false

    const valor14 = Boolean();
    console.log(valor14); // false

ValoreS true:

    let valor8= Boolean(" ");
    console.log( valor8 ); // true

    let valor9 = Boolean(1);
    console.log( valor9 ); // true

    let valor10 = Boolean([]);
    console.log( valor10 ); // true

    let valor11 = Boolean({});
    console.log( valor11 ); // true

    let valor12 = Boolean(function(){});
    console.log( valor12 ); // true

    let valor13 = Boolean(true);
    console.log( valor13 ); // true

    let valor14 = Boolean(-1);
    console.log( valor14 ); // true

_________________
OPERADORES EN JS:
-----------------
En la pagina 35 del manual tenemos los diferentes tipos de opearadores que podemos encontrar en el lenguaje de JS:

Javascript tiene varios tipos de operadores:
○ Operadores de asignación
○ Operadores de comparación
○ Operadores aritméticos
○ Operadores bit a bit
○ Operadores lógicos
○ Operadores de cadena de caracteres
○ Operadores condicionales
○ Operadores unarios
○ Operadores relacionales

Veamos un resumen:

    Operadores de asignacion: x = y
    Asignacion de la adicion : x += y -> x = x + y
    Asignacion de sustraccion: x -= y -> x = x - y
    Asignacion de multiplicacion: x *= y -> x = x * y
    Asiganacion de la division: x /= y -> x = x / y

Operadores de comparacion: devuelven true o false:
    Igualdad == -> 3 == "3"
    Desigualdad != -> 5 != "5"
    Estrictamente iguales === -> 5 === "5"
    Estrictamente desiguales !== -> 9 !== "9"
    Mayor que > -> 6 > 3
    Mayor o igual que >= -> 6 >= 6
    Menor que < -> 6 < 10
    Menor o igual que <= -> 5 <= 5

Operadores aritmeticos:
    Resto % -> 12 % 5 -> devuelve 2
    Incremento ++ -> x = 3 entonces:
        ++x establece el valor en 4 y devuelve 4
        x++ devuelve 3 y solo despues establece el valor en 4

    Decremento -- -> x = 3 entonces:
        --x establece el valor en 2 y devuelve 2
        x-- devuelve 3 y solo despues establece el valor en 2

    Negacion - -> -"3" devuelve -3
                -true devuelve -1

    Unario positivo + -> +"3" devuelve 3
    Exponenciacion ** -> 2 ** 3 devuelve 8

Operadores bit a bit:
    AND & -> a & b
    OR | -> a | b
    XOR -> a ^ b
    Hay mas ver la tabla

Operadores logicos:
    AND logico && -> a && b devuelve true si ambos son true, en caso contrario devuelve false
    OR logico || -> a || b devuelve true si alguno es true , en caso contrario false si ambo son false
    NOT logico ! -> !a devuelve false si su operando puede convertirse a true, en caso contrario devuelve true

Para profundizar mas ver el pdf anexo.

_____________________
CONDICIONAL IF- ELSE:
---------------------

if se utiliza para ejecutar un código si la condición es verdadera.

else, por el contrario, es usado para ejecutar un código si la expresión es falsa.

No necesariamente hay que usar siempre if con else, if puede usarse sólo sin necesidad de evaluar cuando la condición es false.

Vemos como es:

    if(condicion){
        code...
    } else {
        code
    }

Tambien podemos encadenar varios if o else if, veamos:

    if (condition) {
        code
    }
    if (condition) {
        code
    } else {
        code
    }

    if (condition) {
        code
    } else if(condicion) {
        code
    } else if(condicion){
        code
    } else {
        code
    }

OJO en js tenemos el operador ternario:

Es el único operador en Javascript que necesita tres operando

El funcionamiento es el mismo que un if...else, se evalúa una condición y si esta es true se retorna un valor o, si por el contrario es false, se retorna otro valor.

    condition ? true : false

Ejemplo:

    let edad = 25;
    let isAdult = (edad >= 18) ? "adulto" : "Joven"; // adulto

Veamos un ejemplo:

    let edad = 18;

    if (edad === 18) {
        console.log("Eyy puedes ir a votar!! sera tu primera votación.");
    } else if(edad > 18){
        console.log("Puedes votar de nuevo.");
    } else {
        console.log("No puedes ir a votar, eres menor de edad.");
    }

// Veamos el operador ternario:
let numero = 1;
let isAdult = (numero === 1) ? "Soy 1" : "No soy 1";
console.log(isAdult);

RETO HACER UN JUEGO DE PIEDRA PAPEL Y TIJERA. Ver el repo que tengo en github:

https://github.com/alfred3ks/piedra-papel-tijera


___________________
CONDICIONAL SWITCH:
-------------------
Condicional switch:

Permite evaluar una expresión e intentar asociar si valor a diferentes etiquetas de caso(case).

Si encuentra alguna coincidencia ejecuta la sentencia correspondiente a ese case.

En caso de que no encuentre coincidencia, se declara una sentencia “default” que se ejecutará en este caso.

Veamos como es su sintaxis:

    switch (key) {
        case value:
            code
            break;

        default:
            code
            break;
    }

Hace lo mismo que un if pero para situaciones mas largas, por eso un problema donde tengamos que evaluar muchos casos.

Veamos un ejemplo:

let numero = 1;

switch (numero) {
    case 1:
        console.log("Soy uno");
        break;
    case 2:
        console.log("Soy dos");
        break;
    case 3:
        console.log("Soy tres");
        break;
    default:
        console.log("Yo no soy un numero");
        break;
}

_______
ARRAYS:
-------

Los Arrays:

Es una estructura de datos, es un tipo objeto, es una valor que guardara muchos valores dentros, los cuales pueden ser numeros, string u otros objetos.

Su sintaxis es la siguientes: usaremos los corchetes []

    let numeros = [1,2,3,4,5,6];
    let frutas = ["peras", "manzanas", "uvas", "cerezas"];

Para acceder a cada elemento de ese arrays: Recordar que los indices del arrays comienzan en cero (0):

    frutas[2]; // uvas

Existe una atributo por el cual podemos ver si un array contiene elementos dentro: ese es el atributo .length

    frutas.length; // 4

Ahora vamos a ver unos metodos con los cuales podemos trabajar un arrays, osea podemos modificar ese arrays:

Para agregar variables al arrays: Usaremos el metodo .push, agrega elementos al final del arrays:

    frutas.push("fresas");

Para eliminar elementos al array tenemos el metodo .pop(), elimina el ultimo elemento el arrays:

    frutas.pop();

Ahora veremos otro metodo que agrega un elementos al array pero al inicio de este, el metodo es .unshift()

    frutas.unshift("fresas");

Ahora veremos otro metodo que elimina el primer valor del arrays, el metodo es shift()

    frutas.shift();

Ahora veremos otro metodo que nos muestra la ubicacion de un elemento dentro de un arrays:

    frutas.indexOf("cerezas");

_______________
CICLOS O LOOPS:
---------------
__________
CICLO FOR:
----------
Ciclos en JS, ciclo For:

El bucle for en javascript es similar al de Java.

Repite la expresión deseada hasta que la condición se evalúa como false.

La expresión inicial puede ser la declaración de una variable o el uso de una expresión con cualquier grado de complejidad.

Mientras la condición sea true el bucle seguirá ejecutándose.

Después de evaluar la condición y que su valor siga siendo true, se ejecuta el código del bucle.

Después de la ejecución del código, se ejecuta la expresión de incremento y el bucle regresa a evaluar la condición.

Veamos su sintaxis:

    for(expresionInicial; condicion; expresionIncremento){
        code....
    }

Veamos un ejemplo:

    let estudiantes = ["Antonio", "Maria", "Sergio", "Rosa", "Daniel"];

    function saludarEstudiantes(estudiante) {
        console.log(`Hola ${estudiante}.`);
    }

    for(let i = 0; i < estudiantes.length; i++){
        saludarEstudiantes(estudiantes[i]);
    }

Tenemos una variante al for otra sintaxis: El for of:

    for(let estudiante of estudiantes){
        saludarEstudiante(estudiante)
    }

    for(let elemento of estudiantes){
        saludarEstudiantes(elemento);
    }

____________
CICLO WHILE:
------------
Ciclo while:

Crea un bucle que ejecuta una sentencia mientras cierta condición sea true.
Este ciclo se llama un tipo de ciclo indeterminado solo parara cuando la condicion no se cumpla, ojo con este tipo de ciclo que podemos hacer un ciclo infinito.

¿Es posible crear un bucle infinito?
Si es así, ¿qué pasaría si ejecutamos un bucle infinito en nuestro código? que nuestra app podria bloquearse.

Veamos su sintaxis:

while (condition) {
    code
}

Veamos un ejemplo:

    let estudiantes = ["Antonio", "Maria", "Sergio", "Rosa", "Daniel"];

    function saludarEstudiantes(estudiante) {
        console.log(`Hola ${estudiante}.`);
    }

    while ( estudiantes.length > 0) {
        let estudiante = estudiantes.shift();
        console.log(estudiantes);
        saludarEstudiantes(estudiante);
    }

______________
OBJETOS EN JS:
--------------
Los objetos en JS:

JavaScript está diseñado en un paradigma simple basado en objetos. Un objeto es una colección de propiedades, y una propiedad es una asociación entre un nombre (o clave) y un valor. El valor de una propiedad puede ser una función, en cuyo caso la propiedad es conocida como un método. Además de los objetos que están predefinidos en el navegador, puedes definir tus propios objetos.

Los objetos en JavaScript, como en tantos otros lenguajes de programación, se pueden comparar con objetos de la vida real. El concepto de Objetos en JavaScript se puede entender con objetos tangibles de la vida real.

Veamos como generamos un objeto en JS:

    let objeto = {
        propidades.
        metodos
    }

    let miAuto = {
        marca: "Toyota",
        modelo: "Corolla",
        annio: 2000
    }

Para acceder a las propiedades del objeto: Por medio de la nomenclatura del punto: Llamamos al objeto.propiedad

    miAuto.marca;
    miAuto.modelo;
    miAuto.annio;

Nuestro objeto a parte de propiedades puede llevar metodos que son funciones:

let miAuto = {
    marca: "Toyota",
    modelo: "Corolla",
    annio: 2000,
    detalle: function() {
        console.log(`Auto: ${this.marca} ${this.modelo}, del año: ${this.annio}.`);
    }
}

Para poder ejecutar los metodos, las funciones que estan dentro del objeto:

    miAuto.detalle();

Ahora el this.
el this es una variable que hace referencia a su padre, ose ale objeto, es como si dijeramos miAuto.modelo pero decimos this.modelo

Pruebalo y veras que funciona:

let miAuto = {
    marca: "Toyota",
    modelo: "Corolla",
    annio: 2000,
    detalle: function() {
        console.log(`Auto: ${miAuto.marca} ${this.modelo}, del año: ${this.annio}.`);
    }
}

Ahora que ya tenemos un objeto y queremos replicar 30 objeto de un tipo en este caso carro, lo veremos en el siguiente clase. Veremos la funcion constructora que nos ayudara a construir objetos de manera mas facil y rapida.

_____________________________
OBJETOS FUNCION CONSTRUCTORA:
-----------------------------
Objetos, funcion constructora: Generaremos un template del objeto y luego vamos a construir los objetos.

Construimos nuestro template: Recibe las propiedades por parametro:
Tambien por convension llamaremos en mayuscula la funcion:

    function Auto(marca, modelo, annio){
        this.marca = marca;
        this.modelo = modelo;
        this.annio = annio;

    }

Ahora para construir un objeto necesitariamos la palabra reservada new:

    let miAuto = ew Auto("Toyota", "Corolla", 2000);
    miAuto.marca;
    miAuto.modelo;
    miAuto.annio;

__________________
METODOS EN ARRAYS:
------------------

Vamos a ver varios metodos que podemos usar para los arrays:

Veremos un arrays con diferentes objetos dentro del mismo:

let articulos = [
    {nombre: "Bici",coste: 3000},
    {nombre: "TV",coste: 2550},
    {nombre: "Libro",coste: 320},
    {nombre: "Movil",coste: 900},
    {nombre: "Portatil",coste: 999},
    {nombre: "Teclado",coste: 500},
    {nombre: "Audifonos",coste: 1500}
];

Veamos el primer metodo:

filter() -> valida si algo existe o no y genera un nuevo arrays sin modificar el original, recibe por parametro una funcion y a su ves esta funcion recibe como parametro el elemento que queremos filtrar del array:

let articulosFiltrados = articulos.filter(function(articulo){
    return articulo.coste <= 1000;
});

console.log(articulosFiltrados);

Como vemos no modifica el array original.

Veamos el segundo metodo:

map() -> ayuda a maperar ciertos articulos, este tambien genera un nuevo array y no modifica el original:

let articulosMapeados = articulos.map(function(articulo){
    return articulo.nombre;
})
console.log(articulosMapeados);

Veamos un tercer metodo:

find() -> nos ayuda a encontrar un elemento dentro del array, tampoco modifica el arrays original sino crear un nuevo array, si el elemento existe lo devuelve sino no devuelve nada.

let articuloEncontrado = articulos.find(function(articulo){
    return articulo.nombre === "Teclado";
});

console.log(articuloEncontrado);

Vemos un cuarto metodo: Funciona como un ciclo for:

forEach() -> este metodo se le aplica al array y no genera un nuevo array solo recorre el array y devuelve lo que le pidamos si existe:

articulos.forEach(function(articulo){
    console.log(articulo.nombre);
});

Vemos el quinto metodo:

some() -> este metodo nos regresa true o false si el eleemnto existe ono dentro del arrays original, tambien genera un nuevo array:

let articulosBaratos = articulos.some(function(articulo){
    return articulo.coste <=700;
})

console.log(articulosBaratos);

let articulosBaratos1 = articulos.some(function(articulo){

    if(articulo.coste <=700) {
        console.log(articulo.nombre);
    }
})