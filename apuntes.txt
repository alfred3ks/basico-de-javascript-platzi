Curso basico de Javascript: Platzi -2021

_____________________
1- Que es Javascript:
---------------------

¿Cómo nace Javascript?
Nace con la necesidad de generar dinamismo en las páginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.

¿Qué es Javascript?
Es un lenguaje interpretado, orientado a objetos, débilmente tipado y dinámico.

Débilmente tipado:
Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:


    4 + "7"; //47
    4 * "7"; //28
    2 + true; // 3
    false - 3; //-3


Dinámico:
Corre directamente en la etapa de Runetime sin una etapa de compilación previa. Esto permite probar nuestro código inmediatamente; pero también es lo que hace que los errores se muestren hasta que se ejecuta el programa.

¿Realmente es Javascript un lenguaje interpretado?

Si, y la razón es que le navegador lee linea por linea nuestro código el cuál le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador.

Forwards: Ser compatible con versiones futuras significa que incluir una adición al lenguaje en un programa no causaria que se rompa si se ejecuta en un motor JS anterior.

JS no es compatible con versiones futuras.

Javascript es Backwards Compatible:

Todas las funciones nuevas que salen de Javascript no dañarán el trabajo ya hecho, pero no se podrá utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto está Babel que permite utilizar las nuevas características del lenguaje pero lo transforma a una versión que el navegador pueda entender.

Para poder utilizar las cosas nuevas que salen de JS en proyectos anteriores debemos usar JS Compilador BABEL.

Es un compilador de JS para usar las nuevas mejoras de JS.

JavaScript tiene una comunidad enorme de desarrolladores que te pueden ir ayudando a generar diferentes cosas.

Si solo estuvieras interesado en trabajar aplicaciones web tienes muchos frameworks y librerías construidas en JavaScript que te van a ayudar a hacer proyectos de forma mucho mas rápida, eficiente y robusta (Angular, View, React,entre otros)

Si no quieres trabajar solo en aplicaciones Web puedes utilizar JavaScript con un framework que se llama React Native para poder construir aplicaciones nativas como Android y IOS.

Puedes construir aplicaciones de escritorio con JavaScript, usando un framework llamado Electron, pueden correr en Mac o Windows.

También puedes trabajar en la parte del Back-end o **IOT **(Internet Od Things) es un concepto que se refiere a una interconexion digital de objetos cotidianos con Internet. Esto con un Framework llamado NodeJS, el cual es un entorno de ejecución de JavaScript que corre directamente en el Back-end.

___________________
TIPOS DEL LENGUAJE: valores del lenguaje:
-------------------

Todos los lenguajes de programación contienen estructuras de datos, pero estas pueden diferir de un lenguaje a otro.

En Javascript salvo los tipos primitivos, todo lo demás son objetos.

En Javascript existen 6 estructuras de datos primitivas:

    Primitivos:
    - String
    - Number
    - Boolean
    - Symbol (ECMAScript 6)
    - Null
    - Undefined

    - Existen otras estructuras de datos como:
    - Objetos
        - Array
        - Diccionarios
    - Tipos predefinidos por el lenguaje
        - Dates
        - RegExp
    - Tipos definidos por el desarrollador
        - Funciones

-------------------
VALORES PRIMITIVOS:
-------------------

// numberos (Number)
let numero = 40;

// cadenas de textos (String)
let nombre = "Alfredo"; // Podemos usar comillas dobles
let ciudad = 'Madrid'; // Podemos usar simples

// Booleanos (Boolean)
let cierto = true;
let falso = false;

// Valores vacios null y undefined: Para ocupar el espacio en memoria para luego asignarle el valor.
let admin = null;
let edad = undefined;

--------------------
VALORES TIPO OBJETOS:
--------------------

// arrays
let frutas = ["manzanas", "peras", "uvas"];
let array = [1,"Madrid",false,23];

// objetos
let usuario = {
    nombre: "Alfredo",
    apellido: "Sánchez",
    edad: 25,
    isDev:true
}

--------------------
// Para ver los tipos de los valores podemos usar la palabra reservada-> typeof
--------------------

console.log(typeof nombre);// string
console.log(typeof cierto);// boolean
console.log(typeof admin);// object
console.log(typeof edad);// undefined
console.log(typeof frutas);// object
console.log(typeof usuario);// object


_______________
VARIABLES EN JS:
---------------
Son los contenedores dentro de la memoria que podemos reservar para guardar los valores, JS tiene una palabra reservada llamada let, para las varables y const para las constantes.

let nombre = "Juan";
console.log(nombre); // Juan

Existen dos estados de las variables, una es la declaracion y otra es la inicializacion.

declaramos una variable:

let apellido;
console.log(apellido); // undefined

inicializamos los valores a esa variable
apellido = "Gomez";
console.log(apellido); // Gomez

Creamos un array con declaracion y iniciacion al mismo tiempo:
Conjunto de elementos:

let equipo = ["PC", "Movil", "Monitor", "Teclado"];
console.log(equipo); // [ 'PC', 'Movil', 'Monitor', 'Teclado' ]
console.log(equipo[1]); // Movil

Ahora con un objeto:

let persona = {
    nombre: "Laika",
    apellido: "De la Concepcion",
    edad: 5
}
console.log(persona); // { nombre: 'Laika', apellido: 'De la Concepcion', edad: 5 }

console.log(persona.nombre); // Laika

_____________________
LAS CONSTANTES EN JS:
---------------------
A diferencia de las variables que pueden cambiar a lo largo de nuestro programa, las constantes no. Su valor es inmutable una ves declaradas.


const ciudad = "China";
ciudad = "EEUU"; // Nos da error

    Uncaught TypeError: Assignment to constant variable.

__________
Funciones:
----------
Son un conjunto de sentencias que podemos utilizar para generar ciertas acciones con los valores ya guardados antes en las variables.

Las funciones son fragmentos de codigo reutilizable.
Para definir una funcion utilizaremos a palabra reservada function.

Existen dos formas de declarar una funciones: Declarativas y las de Expresion:
_____________
Declarativas:
-------------

function miFuncion() {
    return 3;
    }

miFuncion();

______________________
Expresion: (anonimas):
----------------------

let miFuncion = function(a,b){
    return a + b;
    }

miFuncion(3,5); // 8

Las funciones en funcion del tipo que sean pueden recibir parmetros.

Tambien existen las funciones flechas:

let play = () => {
    return "Vamos a jugar";
}

play();

Nota importante, las funciones pueden o no devolver valores, lo vemos con la palabra reservada return, si creamos una funcion sin el return veremos que aunque le hagamos una llamada con el console.log no nos mostrara nada, veamos este ejemplo:

let dato1 = (a,b)=>{
    let resultado = a + b;
    return resultado;
}

let dato2 = (a,b)=>{
    let resultado = a + b;
    console.log(resultado);
}

console.log(dato1(7,9));
dato2(8,9);

Aunque vemos por pantalla que nos retorna un resultado, la primera funcion dato1 esta devolviiendo el resultado y ese valor es el que se muestra en el pimer console.log.

En cambio en la segunda funcion al llamarla es el console.log dentro de ella que se ejecuta pero esta funcion no devuelve nada.

_______________
EL SCOPE EN JS:
---------------
Es el alcance que tienen las variables, depende mucho de donde declares o inicialices una vriable de si vas a tener acceso a ella o no.

Tenemos dos tipos de scope, el global y el local.

    Tenemos el scope global:

    Son las variables declaradas en nuestro archivo JS que al ser inicializados en el navegador en ese mommento se genera el scope global. En el scope global tenemos todas las declaraciones de las variables, las funciones, las validaciones, ahi van a existir.

    El scope local:

    Es un pequeño universo que existe dentro del scope global. Una ves inicializada una funcion, dentro de ella, se va a generar algo que se llama scope local. Solo desde dentro de la funcion tendremos acceso a los datos declarados dentro de ella. Desde el scope local podemos acceder a las variables del scope global, pero al reves no.

Ejemplo:
Scope global:
Declaramos una variable dentro del scope global:

let nombre = "Arnold";

Creamos una funcion con una variable dentro que tiene scope local:

function usuario(){
    // Scope local
    let apellido = "Facundo";
    return `${nombre} ${apellido}.`;
}

// Al llamar la funcion tenemos lo siguiente:

console.log(usuario()); // Arnold Facundo

console.log(nombre); // Arnold

console.log(apellido); // Uncaught ReferenceError: apellido is not defined

Nos dice que el apellido en el scope global no esta definido, ya que este se encuentra dentro de una funcion, dentro de un scope local, a esa variable solo es accesible dentro de la propia funcion, el scope local pero nunca desde fuera, el scope global.

En cambio las variables globales si pueden ser accesibles desde dentro de la funcion osea desde el scope local.

_______________
HOISTING EN JS:
---------------
Solo ocurre con las variables y las funciones:

Cuando las variables y las funciones se declaran antes de que se procese cualquier tipo de codigo, esto solo pasa con versiones pasadas de JS, ECMASCript 5 para atras.

De ECMASCript 6 ya no sucede porque solo sucede con dos palabras claves, var y function. Las nuevas versiones presentaron nuevas formas de declarar variables que son let y const.

OJO--------
    Las variables y las funciones se procesan antes de ejecutar cualquier codigo y ahi se genera el hoisting, pero las funciones de declaran antes que las variables.
OJO--------


Ejemplos:
______________________
HOISTING EN VARIABLES: OJO esto solo pasa cuando usamos -> var en variables
----------------------
var miNombre; // declaracion
miNombre = "Pepito"; // inicializacion
console.log(miNombre); // Pepito

console.log(miApellido); // undefined ¿Whatsss?
var miApellido = "Motta";
console.log(miApellido); // Motta

// Aqui se genera hoisting porque esta mandando a llamar una variable antes de declararla y inicializarla, loque hace JS es declarar esa variable asi: var miApellido = undefined; y asi una variable es undefined, por eso el console nos muestra undefined. Vamos a ver como lo hace:

var miApellido = undefined;
console.log(miApellido); // undefined
var miApellido = "Motta"; // aqui inicializamos
console.log(miApellido); // Motta

______________________
HOISTING EN FUNCIONES:
----------------------
saludo();

function saludo(){
    console.log(`Hola mi NOMBRE es ${nombre}....`); // Hola mi nombre es undefined
}

var nombre= "Abrines";
saludo();

Aqui vemos lo mismo, se produce un hoistin, JS declara encima la variable var nombre = undefined; y luego cuando se produce el console tenemos esa salida.


var nombre = undefined;
function hey(){
    console.log(`Hola mi nombre es ${nombre}`); // Hola mi nombre es undefined
}
hey();

var nombre = "Abrines";

NOTA:
    Por buenas practicas se recomienda declarar todas las variables al inicio del codigo.

NOTA las funciones flcehas no hacen hoistin ni las funciones anonimas si usamos let.

let niFuncion = function(){return a + b};



